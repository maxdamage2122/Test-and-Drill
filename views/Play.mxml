<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="components.*"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		actionBarVisible="false" clipAndEnableScrolling="true" overlayControls="true"
		viewActivate="viewActivateHandler(event)" >
	
	<fx:Script>
		<![CDATA[
			import flash.events.IOErrorEvent;
			
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			import tv.digitalretro.components.MessageBox;
			import tv.digitalretro.events.MessageBoxEvent;
			
			[Bindable]
			private var playername:String;
			private var file:File;
			private var fileStream:FileStream;
			private var fileName:String = "level1.txt";
			private var directory:String = "leaderboards";
			
			protected var round:int = 1;
			static public var level:int = 1;
			protected var score:int = 0;
			protected var levelTime:int = 120;
			protected var myTimer:Timer = new Timer(1000);
			protected var angle:Number;
			
			protected function rightValue_changeHandler(event:TextOperationEvent):void
			{
				if (int(rightValue.text) != rightSlider.value)
					rightSlider.value=int(rightValue.text);
			}
			
			protected function okBtn_clickHandler(event:MouseEvent):void
			{
				var msgBox:MessageBox = MessageBox.show(this.parent, MessageBox.MB_OK, MessageBox.IC_INFO, getRoundString(), getScoresString());
				msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_OK, msgBox_onOK);
				myTimer.stop();
				away3dScene.resetZoom();
				away3dScene.loadModel(level);
			}
			
			private function save():void
			{
				var tempPlayer:Array=new Array();
				var tempScore:Array=new Array();
				var written:Boolean=false;
				fileName=("level"+level+".txt");
				// Create file object
				file = File.applicationStorageDirectory.resolvePath(directory + "\\" + fileName);
				
				// if file already exists, see what's in there
				if (file.exists){
				// FileStream for writing the file
				fileStream = new FileStream();
				// Open the file in read mode
				fileStream.open(file, FileMode.READ);
				for (var i:int=0;i<10;i++)
				{
					if(fileStream.bytesAvailable>0)//ensure there is still more to read
					{ 
					tempPlayer[i]=fileStream.readObject() as String;
					tempScore[i]=fileStream.readInt();
					}
				}
				//change to write mode
				fileStream.open(file, FileMode.WRITE);
				for (i=0;i<10;i++){
					if (score>tempScore[i]&&!written){
						//write the new scores
						fileStream.writeObject(playername) as String;
						fileStream.writeInt(score);
						//Continue with the rest of the scores
						fileStream.writeObject(tempPlayer[i]) as String;
						fileStream.writeInt(tempScore[i]);
						//indicate the new score is already written
						written=true;
					}else
					{
						//write the old scores
						fileStream.writeObject(tempPlayer[i]) as String;
						fileStream.writeInt(tempScore[i]);
					}
				}
				// Close FileStream
				fileStream.close();
				} else //just write the new score
				{
					fileStream = new FileStream();
					fileStream.open(file, FileMode.WRITE);
					fileStream.writeObject(playername) as String;
					fileStream.writeInt(score);
					fileStream.close();
				}
				
			}
			
			private function levelUnlock(lvl:int):void
			{
				var temp:int=0;
				file = File.applicationStorageDirectory.resolvePath("saves\\levelunlocks.txt");
				if(file.exists){
					fileStream = new FileStream();
					// open for reading
					fileStream.open(file, FileMode.READ);
					if(fileStream.bytesAvailable>0)//ensure there is still more to read
					{ 
					// see what the most recent unlocked level is
					temp=fileStream.readInt();
					}
					// Open the file in write mode
					if(lvl>temp){
						fileStream.open(file, FileMode.WRITE);
					
						// Write the most recent level reached to the file
						fileStream.writeInt(lvl);
					}
					// Close FileStream
					fileStream.close();
				}else
				{	//no previous level unlocks
					fileStream = new FileStream();
					// Open the file in write mode
					fileStream.open(file, FileMode.WRITE);
					// Write the most recent level reached to the file
					fileStream.writeInt(lvl);
					// Close FileStream
					fileStream.close();
				}
			}
			
			
			private function getRoundString():String
			{
				var round:String = "";
				return round.concat("Round ",this.round," Scores");
			}
			
			private function getScoresString():String
			{
				
				var scores:String = "";
				getSceneAngle();
				
				scores=scores.concat("Answer:\n",away3dScene.distance," yards at ",Math.abs(angle),"°");
				if (angle>0)
					scores=scores.concat(" Port");
				else
					if (angle<0)
						scores=scores.concat(" Starboard");
				scores=scores.concat(".\n\nGuess:\n",leftSlider.value," yards at ",Math.abs(rightSlider.value),"°");
				if (rightSlider.value>0)
					scores=scores.concat(" Port");
				else
					if (rightSlider.value<0)
						scores=scores.concat(" Starboard");
				scores=scores.concat(".");
				return scores;
			}
			
			private function getLevelScoreString():String
			{
				var levelScore:String = "";
				levelScore=levelScore.concat("Your score for Level ",level," was ",score,"\n\n","Enter your name below to record your score on the leaderboard.");
				return levelScore;
			}
			
			private function msgBox_onOK(event:MessageBoxEvent):void
			{
				getSceneAngle();
				if ((leftSlider.value<(away3dScene.distance+(away3dScene.distance*0.05)))&&(leftSlider.value>(away3dScene.distance-(away3dScene.distance*0.05))))
					score+=10;
				if ((rightSlider.value<(angle+5))&&(rightSlider.value>(angle-5)))
					score+=10;
				if (round < 10)
				{
					round++;
					myTimer.start();
				}
				else
				{
					var msgBox:MessageBox = MessageBox.show(this.parent, MessageBox.MB_OK, MessageBox.IC_INFO, "CONGRATULATIONS", "You have completed this level.");
					msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_OK, msgBox_onEndOK);
					round=1;
					score+=levelTime;
					myTimer.reset();
					levelTime=120-(level*10);
					
				}
			}
			
			private function msgBox_onEndOK(event:MessageBoxEvent):void
			{
				var msgBox:MessageBox = MessageBox.show(this.parent, MessageBox.MB_ENTER, MessageBox.IC_SAVE, "LEADERBOARD", getLevelScoreString());
				msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_ENTER, msgBox_onEnter);
				
			}
			
			private function msgBox_onEnter(event:MessageBoxEvent):void
			{
				playername=event.message;
				save();
				if (level < 6)
				{
					level++;
					changeEffects(level);
					away3dScene.loadModel(level);
					levelUnlock(level);
					score=0;
					levelTimer();
				}
				else
					navigator.popView();
			}
			
			private function backClicked():void
			{
				myTimer.stop();
				var msgBox:MessageBox = MessageBox.show(this.parent, MessageBox.MB_YESNO, MessageBox.IC_ALERT, "WARNING", "All progress during this level will be lost.\n\nAre you sure you want to quit?");
				msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_YES, backClicked_onYes);
				msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_NO, msgBox_onNo);
			}
			
			private function backClicked_onYes(event:MessageBoxEvent):void
			{
				navigator.popView();
			}
			
			private function msgBox_onNo(event:MessageBoxEvent):void
			{
				myTimer.start();
			}

			protected function viewActivateHandler(event:FlexEvent):void
			{
				away3dScene.loadModel(level);
				changeEffects(level);
				levelTimer();
				
			}
			
			private function timeUp(event:TimerEvent):void{
				var msgBox:MessageBox = MessageBox.show(this.parent, MessageBox.MB_YESNO, MessageBox.IC_ALERT, "TIME'S UP", "Unfortunately, you ran out of time.\n\nWould you like to restart the level?");
				msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_YES, timeUp_onYes);
				msgBox.addEventListener(MessageBoxEvent.MESSAGEBOX_NO, timeUp_onNo);
			}
			
			private function timeUp_onYes(event:MessageBoxEvent):void
			{
				round=1;
				myTimer.reset();
				levelTime=120-(level*10);
				away3dScene.loadModel(level);
				myTimer.start();
			}
			
			private function timeUp_onNo(event:MessageBoxEvent):void
			{
				navigator.popView();
			}
			
			private function zoomClicked():void
			{
				away3dScene.zoom();
				if(zoom.label=="Low")
					zoom.label="High";
				else
					zoom.label="Low";
			}
			
			protected function levelTimer():void
			{
				levelTime=120-(level*10);
				
				myTimer.repeatCount = levelTime;
				
				if (!myTimer.hasEventListener(TimerEvent.TIMER))
					myTimer.addEventListener(TimerEvent.TIMER, countdown);
				if (!myTimer.hasEventListener(TimerEvent.TIMER_COMPLETE))
					myTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timeUp);
				
				myTimer.start();
				
				function countdown(event:TimerEvent):void {
					if (levelTime!=0){
						levelTime--;
					timerValue.text=String(levelTime);
					}
					
				}
			}
			
			protected function changeEffects(lvl:Number):void
			{
				if (lvl%2==0){
					//adds dark filter to night levels
					darkness.alpha = (lvl+2)/10;
					darkness.visible=true;
				}else{
					darkness.visible=false;
				}
			}
			
			protected function getAngleSlider(angle:Number):String
			{
				var display:String;
				if (angle>0)
					display=Math.abs(angle).toString()+'°\nPort';
				else if (angle<0)
					display=Math.abs(angle).toString()+'°\nStar-\nboard';
				else 
					display='\n'+Math.abs(angle).toString()+'°';
				return display;
			}
			
			protected function getSceneAngle():void
			{
				if (away3dScene.angle<=180){
					angle = away3dScene.angle;
				}else
					angle = -(180 - (away3dScene.angle-180))
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>	 
	
	<s:Group top="0" width="68.5%" height="100%" horizontalCenter="0" >
		<s:Image id="darkness" visible="false" width="100%" height="100%" depth="3"
				 scaleMode="stretch" source="images/darkness.png"/>
		<components:Away3dScene id="away3dScene" width="100%" height="100%" depth="1" visible="true"/>
	</s:Group>
	<s:Image width="68.5%" height="100%" horizontalCenter="0" verticalCenter="0" scaleMode="stretch" 
			 smooth="true" source="images/tickmarks.png" visible="true"/>
	<s:Image x="0" y="0" width="25%" height="100%" scaleMode="stretch" smooth="true"
			 source="images/LeftPanelBackground.png"/>
	<s:Image y="0" right="0" width="25%" height="100%" scaleMode="stretch" smooth="true"
			 source="images/RightPanelBackground.png"/>
	
	<s:VGroup y="0" right="0" width="15.5%" height="100%" gap="0">
		<mx:Spacer width="100%" height="19%"/>
		<s:SkinnableContainer width="98%" height="59.5%" skinClass="components.ControlsSkin">
		</s:SkinnableContainer>
	</s:VGroup>
	<s:VGroup y="0" left="0" width="15.5%" height="100%" gap="0" horizontalAlign="right">
		<mx:Spacer width="100%" height="19%"/>
		<s:SkinnableContainer width="98%" height="59.5%" skinClass="components.ControlsSkin">
		</s:SkinnableContainer>
	</s:VGroup>
	
	<s:HGroup x="0" y="0" width="15.7%" height="100%" gap="0">
		<mx:Spacer width="5%" height="100%"/>
		<s:VGroup width="90%" height="100%" gap="0">
			<mx:Spacer width="100%" height="5%"/>
			<s:TextInput id="timerValue" width="100%" height="10%" enabled="false" fontSize="18"
						 fontWeight="bold" textAlign="center"/>
			<mx:Spacer width="100%" height="5%"/>
			<s:Label width="100%" height="6%" color="#464646" fontWeight="bold"
					 text="Distance&#xd;" textAlign="center" verticalAlign="middle"/>
			<mx:Spacer width="100%" height="1%"/>
			
			<s:HGroup width="100%" height="50%" gap="0">
				<s:VSlider id="leftSlider" width="48%" height="100%" liveDragging="true" maximum="10000"
						   minimum="10" skinClass="components.VSliderSkin"/>
				<mx:Spacer width="4%" height="100%"/>
				<s:VGroup width="48%" height="100%" gap="0">
					<s:TextInput id="leftValue" width="100%" height="32%" enabled="false" fontSize="13"
								 fontWeight="normal" text="{leftSlider.value}" textAlign="center"/>
					<mx:Spacer width="100%" height="2%"/>
					<s:Button id="leftPlus" width="100%" height="32%" label="+" autoRepeat="true" minHeight="0"
							  buttonDown="leftSlider.value=leftSlider.value+1" cornerRadius="2" skinClass="components.ButtonSkin"/>
					<mx:Spacer width="100%" height="2%"/>
					<s:Button id="leftMinus" width="100%" height="32%" label="-" autoRepeat="true" minHeight="0"
							  buttonDown="leftSlider.value=leftSlider.value-1" skinClass="components.ButtonSkin"/>
				</s:VGroup>
			</s:HGroup>
			<mx:Spacer width="100%" height="5%"/>
			<s:Button width="100%" height="15%" minHeight="0" label="Quit" click="backClicked()"
					  fontSize="18" skinClass="components.ButtonSkin"/>
		</s:VGroup>
	</s:HGroup>
	
	<s:HGroup y="0" right="0" width="15.7%" height="100%" gap="0">
		<mx:Spacer width="5%" height="100%"/>
		<s:VGroup width="90%" height="100%" gap="0">
			<mx:Spacer width="100%" height="5%"/>
			<s:Button id="zoom" width="100%" height="10%" label="High" click="zoomClicked()"
					  enabled="true" fontSize="18" skinClass="components.ButtonSkin"/>
			<mx:Spacer width="100%" height="5%"/>
			<s:Label width="100%" height="6%" color="#464646" fontWeight="bold"
					 text="Angle" textAlign="center" verticalAlign="middle"/>
			<mx:Spacer width="100%" height="1%"/>
			<s:HGroup width="100%" height="50%" gap="0">
				<s:VGroup width="48%" height="100%" gap="0">
					<s:TextArea id="rightValue" width="100%" height="32%" enabled="false" fontSize="13"
								fontWeight="normal" text="{getAngleSlider(rightSlider.value)}" textAlign="center"/>
					<mx:Spacer width="100%" height="2%"/>
					<s:Button id="rightPlus" width="100%" height="32%" label="+" autoRepeat="true" minHeight="0"
							  buttonDown="rightSlider.value=rightSlider.value+1" cornerRadius="2" skinClass="components.ButtonSkin"/>
					<mx:Spacer width="100%" height="2%"/>
					<s:Button id="rightMinus" width="100%" height="32%" label="-" autoRepeat="true" minHeight="0"
							  buttonDown="rightSlider.value=rightSlider.value-1" skinClass="components.ButtonSkin"/>
				</s:VGroup>
				<mx:Spacer width="4%" height="100%"/>
				<s:VSlider id="rightSlider" width="48%" height="100%" liveDragging="true" maximum="180"
						   minimum="-180" skinClass="components.VSliderSkin"/>
			</s:HGroup>
			<mx:Spacer width="100%" height="5%"/>
			<s:Button width="100%" height="15%" minHeight="0" label="Submit"
					  click="okBtn_clickHandler(event)" fontSize="18"
					  skinClass="components.ButtonSkin"/>
		</s:VGroup>
	</s:HGroup>

</s:View>
